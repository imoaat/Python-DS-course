{"cells":[{"cell_type":"code","source":[],"metadata":{"id":"MeN19xa1JgxR"},"id":"MeN19xa1JgxR","execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"557bf20ed3070c2a"},"source":["## Задание 1\n","\n","**Описание задания**\n","\n","1. Загрузите датасет Titanic по ссылке: [Titanic Dataset Description](https://www.kaggle.com/competitions/titanic).\n","2. Используя только те методы и библиотеки, которые мы изучали (например, `pandas`, `numpy`, `scikit-learn`), загрузите данные в DataFrame.\n","3. Проверьте данные на наличие пропусков и при необходимости обработайте.\n","4. Выберите соответствующие признаки (по вашему усмотрению) в качестве X (признаки) и столбец **Survived** в качестве y (целевая переменная).\n","5. Разделите данные на обучающую и тестовую выборки.\n","6. Постройте модель **SVM (классификация)** для предсказания, выжил пассажир или нет.\n","7. Обучите модель на тренировочной части датасета.\n","8. Сделайте предсказание на тестовой выборке.\n","9. Выведите метрику Accuracy."],"id":"557bf20ed3070c2a"},{"cell_type":"code","metadata":{"ExecuteTime":{"end_time":"2024-12-31T12:02:30.243158Z","start_time":"2024-12-31T12:02:30.240606Z"},"id":"4f8fbe3df6b3a588","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748306850368,"user_tz":-180,"elapsed":13715,"user":{"displayName":"Ivan Imoat","userId":"02387943974569701792"}},"outputId":"c6d5b80a-2753-4334-db2f-95f3a1928a41"},"source":["# Код начинается здесь ...\n","import pandas as pd\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","\n","\n","df_train = pd.read_csv(\"train.csv\")\n","df_test = pd.read_csv(\"test.csv\")\n","\n","passenger_ids = df_test[\"PassengerId\"]\n","\n","# обтединение train и test для единообразной обработки\n","df_test[\"Survived\"] = np.nan  # временный placeholder\n","df_full = pd.concat([df_train, df_test], ignore_index=True)\n","\n","# заполнение пропущенных значений\n","df_full[\"Age\"] = df_full[\"Age\"].fillna(df_full[\"Age\"].median())\n","df_full[\"Fare\"] = df_full[\"Fare\"].fillna(df_full[\"Fare\"].median())\n","df_full[\"Embarked\"] = df_full[\"Embarked\"].fillna(df_full[\"Embarked\"].mode()[0])\n","\n","# преобразование категориальных признаков\n","df_full[\"Sex\"] = df_full[\"Sex\"].map({\"male\": 0, \"female\": 1})\n","df_full = pd.get_dummies(df_full, columns=[\"Embarked\"], drop_first=True)\n","\n","# выбор признаков для х\n","features = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"] + \\\n","           [col for col in df_full.columns if col.startswith(\"Embarked_\")]\n","\n","# разделяем на train и test\n","df_train_clean = df_full[~df_full[\"Survived\"].isna()]\n","df_test_clean = df_full[df_full[\"Survived\"].isna()]\n","\n","X = df_train_clean[features]\n","y = df_train_clean[\"Survived\"].astype(int)\n","X_test_final = df_test_clean[features]\n","\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","model = SVC(kernel=\"linear\")\n","model.fit(X_train, y_train)\n","\n","# предсказание и точность на обучающем наборе\n","y_val_pred = model.predict(X_val)\n","accuracy = accuracy_score(y_val, y_val_pred)\n","print(\"Validation Accuracy:\", accuracy)\n","\n","# предсказания на тестовом наборе\n","test_predictions = model.predict(X_test_final)\n"],"id":"4f8fbe3df6b3a588","outputs":[{"output_type":"stream","name":"stdout","text":["Validation Accuracy: 0.7821229050279329\n"]}],"execution_count":7},{"cell_type":"markdown","metadata":{"id":"d4a2c80f181be726"},"source":["## Задание 2\n","\n","**Описание задания**\n","\n","1. Загрузите тот же датасет Titanic (можно повторить те же шаги загрузки или использовать уже загруженный датасет по ссылке: [Titanic Dataset Description](https://www.kaggle.com/competitions/titanic)).\n","2. Опять же, убедитесь в корректности данных: обработайте пропуски, уберите или заполните отсутствующие значения.\n","3. Разделите данные на обучающую и тестовую выборки, аналогично предыдущему заданию.\n","4. Постройте модель **Логистической регрессии** для классификации (признаки X на ваш выбор, целевая переменная — Survived).\n","5. Обучите модель и сделайте предсказание на тестовой части данных.\n","6. Выведите Accuracy."],"id":"d4a2c80f181be726"},{"cell_type":"code","metadata":{"ExecuteTime":{"end_time":"2024-12-31T12:02:30.250794Z","start_time":"2024-12-31T12:02:30.248998Z"},"id":"4f0162171bade293","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748306972760,"user_tz":-180,"elapsed":1322,"user":{"displayName":"Ivan Imoat","userId":"02387943974569701792"}},"outputId":"da112d49-7cbe-4162-cec9-e95dc11d73dd"},"source":["# Код начинается здесь ...\n","import pandas as pd\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","\n","df_train = pd.read_csv(\"train.csv\")\n","df_test = pd.read_csv(\"test.csv\")\n","\n","passenger_ids = df_test[\"PassengerId\"]\n","\n","# объединяем train и test для удобной обработки\n","df_test[\"Survived\"] = np.nan  # временный placeholder для теста\n","df_full = pd.concat([df_train, df_test], ignore_index=True)\n","\n","# заполняем пропуски медианой и модой\n","df_full[\"Age\"] = df_full[\"Age\"].fillna(df_full[\"Age\"].median())\n","df_full[\"Fare\"] = df_full[\"Fare\"].fillna(df_full[\"Fare\"].median())\n","df_full[\"Embarked\"] = df_full[\"Embarked\"].fillna(df_full[\"Embarked\"].mode()[0])\n","\n","# кодируем категориальные признаки\n","df_full[\"Sex\"] = df_full[\"Sex\"].map({\"male\": 0, \"female\": 1})\n","df_full = pd.get_dummies(df_full, columns=[\"Embarked\"], drop_first=True)\n","\n","# выбираем признаки для модели\n","features = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"] + \\\n","           [col for col in df_full.columns if col.startswith(\"Embarked_\")]\n","\n","# разделяем обратно train и test\n","df_train_clean = df_full[~df_full[\"Survived\"].isna()]\n","df_test_clean = df_full[df_full[\"Survived\"].isna()]\n","\n","X = df_train_clean[features]\n","y = df_train_clean[\"Survived\"].astype(int)\n","X_test_final = df_test_clean[features]\n","\n","# делим train на train и validation\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# создаём и обучаем модель логистической регрессии\n","model = LogisticRegression(max_iter=1000, random_state=42)\n","model.fit(X_train, y_train)\n","\n","# предсказываем и считаем accuracy на validation\n","y_val_pred = model.predict(X_val)\n","accuracy = accuracy_score(y_val, y_val_pred)\n","print(\"Validation Accuracy:\", accuracy)\n","\n","# предсказание на тестовом наборе (если нужно)\n","test_predictions = model.predict(X_test_final)\n"],"id":"4f0162171bade293","outputs":[{"output_type":"stream","name":"stdout","text":["Validation Accuracy: 0.8100558659217877\n"]}],"execution_count":8},{"cell_type":"markdown","metadata":{"id":"d54a2f270e8b83a0"},"source":["## Задание 3\n","\n","**Описание задания**\n","\n","1. Снова используйте датасет Titanic по ссылке: [Titanic Dataset Description](https://www.kaggle.com/competitions/titanic).\n","2. На этот раз попробуйте решить задачу **регрессии**: например, предскажите признак **Fare** (стоимость билета) или **Age** (возраст) на основе других признаков (на ваше усмотрение).\n","3. Обработайте пропуски в соответствующем столбце, если это необходимо.\n","4. Разделите данные на обучающую и тестовую выборки.\n","5. Постройте модель **линейной регрессии** (`LinearRegression`), обучите её.\n","6. Сделайте предсказание целевой переменной (Fare или Age) на тестовой выборке.\n","7. Оцените качество модели с помощью метрики **Mean Squared Error (MSE)**.\n","\n","Обратите внимание, что задача здесь — именно регрессия, поэтому в качестве целевой переменной не используйте Survived."],"id":"d54a2f270e8b83a0"},{"cell_type":"code","metadata":{"ExecuteTime":{"end_time":"2024-12-31T12:02:31.719346Z","start_time":"2024-12-31T12:02:31.716830Z"},"id":"4beaf709bf6e3a9e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748307318629,"user_tz":-180,"elapsed":59,"user":{"displayName":"Ivan Imoat","userId":"02387943974569701792"}},"outputId":"13f12ac1-0229-4715-90a5-6d83a2238ae7"},"source":["# Код начинается здесь ...\n","import pandas as pd\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error\n","\n","df_train = pd.read_csv(\"train.csv\")\n","df_test = pd.read_csv(\"test.csv\")\n","\n","# объединяем train и test для удобной обработки\n","df_test[\"Age\"] = np.nan  # временный placeholder, тк Age — целевая\n","df_full = pd.concat([df_train, df_test], ignore_index=True)\n","\n","# заполняем пропуски в признаках\n","df_full[\"Fare\"] = df_full[\"Fare\"].fillna(df_full[\"Fare\"].median())\n","df_full[\"Embarked\"] = df_full[\"Embarked\"].fillna(df_full[\"Embarked\"].mode()[0])\n","\n","# Sex в числовой формат\n","df_full[\"Sex\"] = df_full[\"Sex\"].map({\"male\": 0, \"female\": 1})\n","\n","# one-hot кодируем Embarked\n","df_full = pd.get_dummies(df_full, columns=[\"Embarked\"], drop_first=True)\n","\n","# признаки для предсказания\n","features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Fare\"] + \\\n","           [col for col in df_full.columns if col.startswith(\"Embarked_\")]\n","\n","# отделяем строки, где Age известен\n","df_train_age = df_full[~df_full[\"Age\"].isna()]\n","\n","# отделяем строки, где Age пропущен\n","df_test_age = df_full[df_full[\"Age\"].isna()]\n","\n","X = df_train_age[features]\n","y = df_train_age[\"Age\"]\n","\n","# делим на обучающую и валидационную выборки\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# создаём и обучаем\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# предсказываем Age на валидации\n","y_val_pred = model.predict(X_val)\n","\n","# считаем MSE\n","mse = mean_squared_error(y_val, y_val_pred)\n","print(\"Validation MSE:\", mse)\n","\n","# предсказание Age на тестовом наборе,где Age пропущен\n","test_predictions = model.predict(df_test_age[features])\n"],"id":"4beaf709bf6e3a9e","outputs":[{"output_type":"stream","name":"stdout","text":["Validation MSE: 138.35076239498898\n"]}],"execution_count":9}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.9"},"colab":{"provenance":[{"file_id":"1xPum8hYCSuasi-gAEOsQ0PdUZPwq-HIs","timestamp":1748305263083},{"file_id":"1r873c7RaM7KcWUStgMk_JaDW4tuVRQbC","timestamp":1739892975450}]}},"nbformat":4,"nbformat_minor":5}